!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ricksanchez/Projects/ClouddiskServer/3.0/server/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
%.o	Makefile	/^%.o: %.c$/;"	t
ALL	Makefile	/^ALL: $(Outs) $/;"	t
ARGS_CHECK	thread_pool.h	/^#define ARGS_CHECK(/;"	d
BIN	Makefile	/^BIN := server$/;"	m
CC	Makefile	/^CC := gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -w -g -lssl -lcrypto -lmysqlclient$/;"	m
CMD_TYPE_CD	thread_pool.h	/^    CMD_TYPE_CD,$/;"	e	enum:__anon4d71270c0103
CMD_TYPE_GETS	thread_pool.h	/^    CMD_TYPE_GETS,$/;"	e	enum:__anon4d71270c0103
CMD_TYPE_LOGIN_ENCRYTPTEDCODE	thread_pool.h	/^    CMD_TYPE_LOGIN_ENCRYTPTEDCODE,$/;"	e	enum:__anon4d71270c0103
CMD_TYPE_LOGIN_USRNAME	thread_pool.h	/^    CMD_TYPE_LOGIN_USRNAME = 100,$/;"	e	enum:__anon4d71270c0103
CMD_TYPE_LS	thread_pool.h	/^    CMD_TYPE_LS,$/;"	e	enum:__anon4d71270c0103
CMD_TYPE_MKDIR	thread_pool.h	/^    CMD_TYPE_MKDIR,$/;"	e	enum:__anon4d71270c0103
CMD_TYPE_NOTCMD	thread_pool.h	/^    CMD_TYPE_NOTCMD,  \/\/不是命令$/;"	e	enum:__anon4d71270c0103
CMD_TYPE_PUTS	thread_pool.h	/^    CMD_TYPE_PUTS,$/;"	e	enum:__anon4d71270c0103
CMD_TYPE_PWD	thread_pool.h	/^    CMD_TYPE_PWD=1,$/;"	e	enum:__anon4d71270c0103
CMD_TYPE_REGISTER_ENCRYTPTEDCODE	thread_pool.h	/^    CMD_TYPE_REGISTER_ENCRYTPTEDCODE,$/;"	e	enum:__anon4d71270c0103
CMD_TYPE_REGISTER_USERNAME	thread_pool.h	/^    CMD_TYPE_REGISTER_USERNAME,$/;"	e	enum:__anon4d71270c0103
CMD_TYPE_REMOVE	thread_pool.h	/^    CMD_TYPE_REMOVE,$/;"	e	enum:__anon4d71270c0103
CMD_TYPE_RMDIR	thread_pool.h	/^    CMD_TYPE_RMDIR,$/;"	e	enum:__anon4d71270c0103
CMD_TYPE_TOUCH	thread_pool.h	/^    CMD_TYPE_TOUCH,$/;"	e	enum:__anon4d71270c0103
CmdType	thread_pool.h	/^}CmdType;$/;"	t	typeref:enum:__anon4d71270c0103
DB_HOST	databases.c	/^#define DB_HOST /;"	d	file:
DB_NAME	databases.c	/^#define DB_NAME /;"	d	file:
DB_PASS	databases.c	/^#define DB_PASS /;"	d	file:
DB_USER	databases.c	/^#define DB_USER /;"	d	file:
EMPTY	hashtable.h	/^#define EMPTY /;"	d
EPOLL_ARR_SIZE	main.c	/^#define EPOLL_ARR_SIZE /;"	d	file:
ERROR_CHECK	thread_pool.h	/^#define ERROR_CHECK(/;"	d
FileEntry	thread_pool.h	/^typedef struct FileEntry{$/;"	s
FileEntry	thread_pool.h	/^}FileEntry;$/;"	t	typeref:struct:FileEntry
FileInfo	thread_pool.h	/^typedef struct FileInfo{$/;"	s
FileInfo	thread_pool.h	/^}FileInfo;$/;"	t	typeref:struct:FileInfo
HashTable	hashtable.h	/^} HashTable;  $/;"	t	typeref:struct:__anonba8be1670208
IP	config.h	/^#define IP /;"	d
KeyValue	hashtable.h	/^} KeyValue;  $/;"	t	typeref:struct:__anonba8be1670108
ListNode	user_link_list/linked_list.h	/^typedef struct ListNode {  $/;"	s
ListNode	user_link_list/linked_list.h	/^} ListNode;  $/;"	t	typeref:struct:ListNode
MAX_SIZE	cd.c	/^#define MAX_SIZE /;"	d	file:
MAX_SIZE	hashtable.h	/^#define MAX_SIZE /;"	d
MODE	touch.c	/^#define MODE /;"	d	file:
MSG_TYPE_LOGINERROR	thread_pool.h	/^    MSG_TYPE_LOGINERROR,$/;"	e	enum:__anon4d71270c0103
MSG_TYPE_LOGINOK	thread_pool.h	/^    MSG_TYPE_LOGINOK,$/;"	e	enum:__anon4d71270c0103
MSG_TYPE_LOGIN_SALT	thread_pool.h	/^    MSG_TYPE_LOGIN_SALT,$/;"	e	enum:__anon4d71270c0103
MSG_TYPE_REGISTERERROR	thread_pool.h	/^    MSG_TYPE_REGISTERERROR,$/;"	e	enum:__anon4d71270c0103
MSG_TYPE_REGISTEROK	thread_pool.h	/^    MSG_TYPE_REGISTEROK,$/;"	e	enum:__anon4d71270c0103
MSG_TYPE_REGISTER_SALT	thread_pool.h	/^    MSG_TYPE_REGISTER_SALT,$/;"	e	enum:__anon4d71270c0103
Outs	Makefile	/^Outs := $(patsubst %.c, %.o, $(Srcs))$/;"	m
PORT	config.h	/^#define PORT /;"	d
SALT_LENGTH	login.c	/^#define SALT_LENGTH /;"	d	file:
SALT_LENGTH	register.c	/^#define SALT_LENGTH /;"	d	file:
SIZE	thread_pool.h	/^#define SIZE(/;"	d
Srcs	Makefile	/^Srcs := $(wildcard *.c)$/;"	m
StringStack	cd.c	/^} StringStack;$/;"	t	typeref:struct:__anon7c9508bd0108	file:
THREAD_ERROR_CHECK	thread_pool.h	/^#define THREAD_ERROR_CHECK(/;"	d
THREAD_NUM	config.h	/^#define THREAD_NUM /;"	d
User	thread_pool.h	/^typedef struct User{$/;"	s
User	thread_pool.h	/^}User;$/;"	t	typeref:struct:User
_SERVER_SOURCE	thread_pool.h	/^#define _SERVER_SOURCE$/;"	d
__CONFIG_H__	config.h	/^#define __CONFIG_H__$/;"	d
__HASH_TABLE_H__	hashtable.h	/^#define __HASH_TABLE_H__$/;"	d
__LINKED_LIST_H__	user_link_list/linked_list.h	/^#define __LINKED_LIST_H__$/;"	d
__THREAD_POOL_H__	thread_pool.h	/^#define __THREAD_POOL_H__$/;"	d
__anon4d71270c0103	thread_pool.h	/^typedef enum {$/;"	g
__anon4d71270c0208	thread_pool.h	/^{$/;"	s
__anon7c9508bd0108	cd.c	/^typedef struct {$/;"	s	file:
__anonba8be1670108	hashtable.h	/^typedef struct {  $/;"	s
__anonba8be1670208	hashtable.h	/^typedef struct {  $/;"	s
addEpollReadfd	server.c	/^int addEpollReadfd(int epfd, int fd)$/;"	f	typeref:typename:int
addFileEntry	FileEntry.c	/^int addFileEntry(FileEntry* fileEntry) {$/;"	f	typeref:typename:int
addFileInfo	FileInfo.c	/^int addFileInfo(FileInfo* fileInfo) {$/;"	f	typeref:typename:int
addUser	User.c	/^int addUser(User* user) {$/;"	f	typeref:typename:int
appendNode	user_link_list/linked_list.c	/^void appendNode(ListNode **head, void *val) {  $/;"	f	typeref:typename:void
broadcastALL	task_queue.c	/^int broadcastALL(task_queue_t * que)$/;"	f	typeref:typename:int
buff	thread_pool.h	/^    char buff[1000];\/\/记录内容本身$/;"	m	struct:__anon4d71270c0208	typeref:typename:char[1000]
cdCommand	cd.c	/^void cdCommand(task_t* task) {$/;"	f	typeref:typename:void
clean	Makefile	/^clean:$/;"	t
cond	thread_pool.h	/^    pthread_cond_t cond;$/;"	m	struct:task_queue_s	typeref:typename:pthread_cond_t
createNode	user_link_list/linked_list.c	/^ListNode* createNode(void * val) {  $/;"	f	typeref:typename:ListNode *
createStringStack	cd.c	/^StringStack* createStringStack() {$/;"	f	typeref:typename:StringStack *
create_db_connection	databases.c	/^MYSQL* create_db_connection(){$/;"	f	typeref:typename:MYSQL *
cryptpasswd	thread_pool.h	/^    char cryptpasswd[64];$/;"	m	struct:User	typeref:typename:char[64]
data	thread_pool.h	/^    char data[1000];$/;"	m	struct:task_s	typeref:typename:char[1000]
delEpollReadfd	server.c	/^int delEpollReadfd(int epfd, int fd)$/;"	f	typeref:typename:int
deleteFileEntry	FileEntry.c	/^int deleteFileEntry(int id) {$/;"	f	typeref:typename:int
deleteNode	user_link_list/linked_list.c	/^void deleteNode(ListNode **head, void * target) {  $/;"	f	typeref:typename:void
deleteNode2	user_link_list/linked_list.c	/^void deleteNode2(ListNode **head, int peerfd)$/;"	f	typeref:typename:void
destroyHashTable	hashtable.c	/^void destroyHashTable(HashTable *ht) {$/;"	f	typeref:typename:void
destroyStringStack	cd.c	/^void destroyStringStack(StringStack* stack) {$/;"	f	typeref:typename:void
doTask	bussiness.c	/^void doTask(task_t * task)$/;"	f	typeref:typename:void
epfd	thread_pool.h	/^    int epfd;\/\/epoll的实例$/;"	m	struct:task_s	typeref:typename:int
erase	hashtable.c	/^void erase(HashTable *ht, const char *key) {  $/;"	f	typeref:typename:void
exitPipe	main.c	/^int exitPipe[2];$/;"	v	typeref:typename:int[2]
fileName	thread_pool.h	/^    char fileName[64];$/;"	m	struct:FileEntry	typeref:typename:char[64]
fileName	thread_pool.h	/^    char fileName[64];$/;"	m	struct:FileInfo	typeref:typename:char[64]
fileSize	thread_pool.h	/^    int fileSize;$/;"	m	struct:FileEntry	typeref:typename:int
fileType	thread_pool.h	/^    int fileType;$/;"	m	struct:FileEntry	typeref:typename:int
find	hashtable.c	/^void * find(HashTable *ht, const char *key) {  $/;"	f	typeref:typename:void *
flag	thread_pool.h	/^    int flag;\/\/0 表示要退出，1 表示不退出$/;"	m	struct:task_queue_s	typeref:typename:int
freeList	user_link_list/linked_list.c	/^void freeList(ListNode *head) {  $/;"	f	typeref:typename:void
freeStrs	str_util.c	/^void freeStrs(char * pstrs[], int count)$/;"	f	typeref:typename:void
generateMD5	bussiness.c	/^void generateMD5(const char *filename, char *md5String) {$/;"	f	typeref:typename:void
generateSalt	register.c	/^void generateSalt(char* salt,size_t length){$/;"	f	typeref:typename:void
getCurrentDirectory	ls.c	/^char* getCurrentDirectory(const char* pwd) {$/;"	f	typeref:typename:char *
getEntriesInDir	FileEntry.c	/^FileEntry *getEntriesInDir(int dirId){$/;"	f	typeref:typename:FileEntry *
getEntryByPath	FileEntry.c	/^FileEntry *getEntryByPath(const char *path)$/;"	f	typeref:typename:FileEntry *
getParentDirectory	ls.c	/^char* getParentDirectory(const char* pwd) {$/;"	f	typeref:typename:char *
getParentPath	cd.c	/^char* getParentPath(const char* path) {$/;"	f	typeref:typename:char *
getsCommand	gets.c	/^void getsCommand(task_t* task) {$/;"	f	typeref:typename:void
handleMessage	bussiness.c	/^void handleMessage(int sockfd, int epfd, task_queue_t * que)$/;"	f	typeref:typename:void
hash	hashtable.c	/^unsigned int hash(const char *key) {  $/;"	f	typeref:typename:unsigned int
id	thread_pool.h	/^    int id;$/;"	m	struct:FileEntry	typeref:typename:int
id	thread_pool.h	/^    int id;$/;"	m	struct:User	typeref:typename:int
initHashTable	hashtable.c	/^void initHashTable(HashTable *ht) {  $/;"	f	typeref:typename:void
insert	hashtable.c	/^void insert(HashTable *ht, const char *key, void * value) {  $/;"	f	typeref:typename:void
ip	server.conf	/^ip=127.0.0.1$/;"	k
isStringStackEmpty	cd.c	/^int isStringStackEmpty(StringStack* stack) {$/;"	f	typeref:typename:int
isStringStackFull	cd.c	/^int isStringStackFull(StringStack* stack) {$/;"	f	typeref:typename:int
key	hashtable.h	/^    char key[50];  $/;"	m	struct:__anonba8be1670108	typeref:typename:char[50]
len	thread_pool.h	/^    int len;\/\/记录内容长度$/;"	m	struct:__anon4d71270c0208	typeref:typename:int
lsCommand	ls.c	/^void lsCommand(task_t * task)$/;"	f	typeref:typename:void
main	main.c	/^int main(int argc, char ** argv)$/;"	f	typeref:typename:int
md5	thread_pool.h	/^    char md5[64];$/;"	m	struct:FileEntry	typeref:typename:char[64]
md5	thread_pool.h	/^    char md5[64];$/;"	m	struct:FileInfo	typeref:typename:char[64]
mkdirCommand	mkdir.c	/^void mkdirCommand(task_t * task)$/;"	f	typeref:typename:void
mutex	thread_pool.h	/^    pthread_mutex_t mutex; $/;"	m	struct:task_queue_s	typeref:typename:pthread_mutex_t
next	user_link_list/linked_list.h	/^    struct ListNode *next;   \/\/ 指向下一个节点的指针  $/;"	m	struct:ListNode	typeref:struct:ListNode *
notCommand	bussiness.c	/^void notCommand(task_t *task){$/;"	f	typeref:typename:void
ownerId	thread_pool.h	/^    int ownerId;$/;"	m	struct:FileEntry	typeref:typename:int
pFront	thread_pool.h	/^    task_t * pFront;$/;"	m	struct:task_queue_s	typeref:typename:task_t *
pNext	thread_pool.h	/^    struct task_s * pNext;$/;"	m	struct:task_s	typeref:struct:task_s *
pRear	thread_pool.h	/^    task_t * pRear;$/;"	m	struct:task_queue_s	typeref:typename:task_t *
parentId	thread_pool.h	/^    int parentId;$/;"	m	struct:FileEntry	typeref:typename:int
peerfd	thread_pool.h	/^    int peerfd;\/\/与client进行通信的套接字$/;"	m	struct:task_s	typeref:typename:int
popString	cd.c	/^char* popString(StringStack* stack) {$/;"	f	typeref:typename:char *
port	server.conf	/^port=8080$/;"	k
printHashTable	hashtable.c	/^void printHashTable(HashTable *ht) {  $/;"	f	typeref:typename:void
printList	user_link_list/linked_list.c	/^void printList(ListNode *head) {  $/;"	f	typeref:typename:void
pthreadNum	thread_pool.h	/^    int pthreadNum;$/;"	m	struct:threadpool_s	typeref:typename:int
pthreads	thread_pool.h	/^    pthread_t * pthreads;$/;"	m	struct:threadpool_s	typeref:typename:pthread_t *
pushString	cd.c	/^void pushString(StringStack* stack, const char* str) {$/;"	f	typeref:typename:void
putsCommand	puts.c	/^void putsCommand(task_t * task) {$/;"	f	typeref:typename:void
pwd	thread_pool.h	/^    char pwd[64];$/;"	m	struct:User	typeref:typename:char[64]
pwdCommand	pwd.c	/^void pwdCommand(task_t * task)$/;"	f	typeref:typename:void
que	thread_pool.h	/^    task_queue_t que;\/\/...任务队列$/;"	m	struct:threadpool_s	typeref:typename:task_queue_t
queSize	thread_pool.h	/^    int queSize;\/\/记录当前任务的数量$/;"	m	struct:task_queue_s	typeref:typename:int
queueDestroy	task_queue.c	/^int queueDestroy(task_queue_t * que)$/;"	f	typeref:typename:int
queueInit	task_queue.c	/^int queueInit(task_queue_t * que)$/;"	f	typeref:typename:int
queueIsEmpty	task_queue.c	/^int queueIsEmpty(task_queue_t * que)$/;"	f	typeref:typename:int
readConfig	config.c	/^void readConfig(const char* filename, HashTable * ht)$/;"	f	typeref:typename:void
rebuild	Makefile	/^rebuild: clean ALL	$/;"	t
recRemoveDir	rmdir.c	/^void recRemoveDir(int dirId){$/;"	f	typeref:typename:void
recvn	server.c	/^int recvn(int sockfd, void * buff, int len)$/;"	f	typeref:typename:int
removeCommand	rm.c	/^void removeCommand(task_t * task){$/;"	f	typeref:typename:void
rmdirCommand	rmdir.c	/^void rmdirCommand(task_t *task){$/;"	f	typeref:typename:void
salt	thread_pool.h	/^    char salt[64];$/;"	m	struct:User	typeref:typename:char[64]
selectFileEntry	FileEntry.c	/^FileEntry* selectFileEntry(int id) {$/;"	f	typeref:typename:FileEntry *
selectFileEntryByFileName	FileEntry.c	/^FileEntry* selectFileEntryByFileName(const char* fileName) {$/;"	f	typeref:typename:FileEntry *
selectFileEntryByFileNameAndOwnerId	FileEntry.c	/^FileEntry* selectFileEntryByFileNameAndOwnerId(const char* fileName, int ownerId, int* entryCoun/;"	f	typeref:typename:FileEntry *
selectFileEntryByOwnerId	FileEntry.c	/^FileEntry* selectFileEntryByOwnerId(int ownerId, int* entryCount) {$/;"	f	typeref:typename:FileEntry *
selectFileEntryByparentId	FileEntry.c	/^FileEntry* selectFileEntryByparentId(int parentId, int* entryCount) {$/;"	f	typeref:typename:FileEntry *
selectFileInfo	FileInfo.c	/^FileInfo* selectFileInfo(char* md5, int md5Len) {$/;"	f	typeref:typename:FileInfo *
selectUser	User.c	/^User* selectUser(int userId) {$/;"	f	typeref:typename:User *
selectUserByUserName	User.c	/^User* selectUserByUserName(const char* userName) {$/;"	f	typeref:typename:User *
sendn	server.c	/^int sendn(int sockfd, const void * buff, int len)$/;"	f	typeref:typename:int
sigHandler	main.c	/^void sigHandler(int num)$/;"	f	typeref:typename:void
sighandler_t	thread_pool.h	/^typedef void (*sighandler_t)(int);$/;"	t	typeref:typename:void (*)(int)
size	hashtable.h	/^    int size;  $/;"	m	struct:__anonba8be1670208	typeref:typename:int
splitString	str_util.c	/^void splitString(const char * pstrs, const char * delimiter, char *tokens[], int max_tokens, int/;"	f	typeref:typename:void
strings	cd.c	/^    char** strings;  \/\/ 字符串数组$/;"	m	struct:__anon7c9508bd0108	typeref:typename:char **	file:
table	hashtable.h	/^    KeyValue table[MAX_SIZE];  $/;"	m	struct:__anonba8be1670208	typeref:typename:KeyValue[]
taskDeque	task_queue.c	/^task_t * taskDeque(task_queue_t * que)$/;"	f	typeref:typename:task_t *
taskEnque	task_queue.c	/^int taskEnque(task_queue_t * que, task_t * ptask)$/;"	f	typeref:typename:int
taskSize	task_queue.c	/^int taskSize(task_queue_t * que)$/;"	f	typeref:typename:int
task_queue_s	thread_pool.h	/^typedef struct task_queue_s$/;"	s
task_queue_t	thread_pool.h	/^}task_queue_t;$/;"	t	typeref:struct:task_queue_s
task_s	thread_pool.h	/^typedef struct task_s{$/;"	s
task_t	thread_pool.h	/^}task_t;$/;"	t	typeref:struct:task_s
tcpInit	server.c	/^int tcpInit(const char * ip, const char * port)$/;"	f	typeref:typename:int
threadFunc	thread_pool.c	/^void * threadFunc(void* arg)$/;"	f	typeref:typename:void *
thread_num	server.conf	/^thread_num=3$/;"	k
threadpoolDestroy	thread_pool.c	/^int threadpoolDestroy(threadpool_t * pthreadpool)$/;"	f	typeref:typename:int
threadpoolInit	thread_pool.c	/^int threadpoolInit(threadpool_t * pthreadpool, int num)$/;"	f	typeref:typename:int
threadpoolStart	thread_pool.c	/^int threadpoolStart(threadpool_t * pthreadpool)$/;"	f	typeref:typename:int
threadpoolStop	thread_pool.c	/^int threadpoolStop(threadpool_t * pthreadpool)$/;"	f	typeref:typename:int
threadpool_s	thread_pool.h	/^typedef struct threadpool_s {$/;"	s
threadpool_t	thread_pool.h	/^}threadpool_t;$/;"	t	typeref:struct:threadpool_s
top	cd.c	/^    int top;         \/\/ 栈顶指针$/;"	m	struct:__anon7c9508bd0108	typeref:typename:int	file:
touchCommand	touch.c	/^void touchCommand(task_t * task)$/;"	f	typeref:typename:void
train_t	thread_pool.h	/^}train_t;$/;"	t	typeref:struct:__anon4d71270c0208
transferFile	transfer.c	/^int transferFile(int sockfd)$/;"	f	typeref:typename:int
type	thread_pool.h	/^    CmdType type;$/;"	m	struct:__anon4d71270c0208	typeref:typename:CmdType
type	thread_pool.h	/^    CmdType type;$/;"	m	struct:task_s	typeref:typename:CmdType
updateFileEntry	FileEntry.c	/^int updateFileEntry(FileEntry* fileEntry) {$/;"	f	typeref:typename:int
updateFileInfo	FileInfo.c	/^int updateFileInfo(FileInfo* fileInfo, const char* oldMd5) {$/;"	f	typeref:typename:int
updateUser	User.c	/^int updateUser(User* user) {$/;"	f	typeref:typename:int
user	thread_pool.h	/^    User* user;$/;"	m	struct:task_s	typeref:typename:User *
userLoginCheck1	login.c	/^void userLoginCheck1(task_t * task)$/;"	f	typeref:typename:void
userLoginCheck2	login.c	/^void userLoginCheck2(task_t * task)$/;"	f	typeref:typename:void
userName	thread_pool.h	/^    char userName[64];$/;"	m	struct:User	typeref:typename:char[64]
userRegister1	register.c	/^void userRegister1(task_t* task){$/;"	f	typeref:typename:void
userRegister2	register.c	/^void userRegister2(task_t* task){$/;"	f	typeref:typename:void
val	user_link_list/linked_list.h	/^    void * val;              \/\/ 节点的值  $/;"	m	struct:ListNode	typeref:typename:void *
value	hashtable.h	/^    void * value;  $/;"	m	struct:__anonba8be1670108	typeref:typename:void *
